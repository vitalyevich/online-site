-- Table: users
CREATE TABLE users (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    -- gender VARCHAR(1) NOT NULL,
    date_of_birth DATE NOT NULL,
    email VARCHAR(20) NULL,
    UNIQUE (phone),
    UNIQUE (email),
    PRIMARY KEY(id)
);

-- Table: roles
CREATE TABLE roles (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    role_name VARCHAR(20) NOT NULL,
    UNIQUE(role_name),
    PRIMARY KEY (id)
);

-- Table for mapping user and roles: user_roles
CREATE TABLE user_roles (
    user_id  INT NOT NULL,
    role_id  INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

-- Table: access
CREATE TABLE access (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL,
    username VARCHAR(20) NOT NULL,
    password VARCHAR(255) NOT NULL,
    active BOOLEAN NOT NULL,
    UNIQUE (username),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

-- Table: photos
CREATE TABLE photos (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    path VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    format VARCHAR(20) NOT NULL,
    PRIMARY KEY (id)
);

-- Table for mapping user and photos: user_roles
CREATE TABLE user_photos (
    user_id INT NOT NULL,
    photo_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, photo_id)
);

-- Table: products
CREATE TABLE products (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    product_name VARCHAR(20) NOT NULL,
    photo_id INT NOT NULL,
    amount INT NOT NULL,
    weight INT NOT NULL,
    FOREIGN KEY (photo_id) REFERENCES photos (id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

-- Table: ingredients
CREATE TABLE ingredients (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    ingredient_name VARCHAR(20) NOT NULL,
    PRIMARY KEY (id)
);

-- Table for mapping product and ingredients: product_ingredients
CREATE TABLE product_ingredients (
    product_id INT NOT NULL,
    ingredient_id INT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products (id)  ON DELETE CASCADE,
    FOREIGN KEY (ingredient_id) REFERENCES ingredients (id) ON DELETE CASCADE,
    PRIMARY KEY (product_id, ingredient_id)
);

-- Table: sets
CREATE TABLE sets (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    product_id INT NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE,
    PRIMARY KEY (id, product_id)
);

-- Table: cities
CREATE TABLE cities (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    city_name VARCHAR(20),
    PRIMARY KEY (id)
);

-- Table: addresses
CREATE TABLE addresses (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    city_id INT NOT NULL,
    street VARCHAR(20) NOT NULL,
    entrance INT NULL,
    floor INT NULL,
    home INT NOT NULL,
    FOREIGN KEY (city_id) REFERENCES cities (id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

-- Table for mapping user and addresses: user_addresses
CREATE TABLE user_addresses (
    client_id INT NOT NULL,
    address_id INT NOT NULL,
    FOREIGN KEY (address_id) REFERENCES addresses (id) ON DELETE CASCADE,
    FOREIGN KEY (client_id) REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (client_id, address_id)
);

-- Table: baskets
CREATE TABLE baskets (
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, product_id)
);

-- Table: payments
CREATE TABLE payments (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    payment_name VARCHAR(20),
    PRIMARY KEY (id)
);

-- Table: orders
CREATE TABLE orders (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    order_date TIMESTAMP NOT NULL,
    user_id INT NOT NULL,
    address_id INT NOT NULL,
    payment_id INT NOT NULL,
    price MONEY NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (address_id) REFERENCES addresses (id) ON DELETE CASCADE,
    FOREIGN KEY (payment_id) REFERENCES payments (id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

-- Table for mapping order and products: order_products
CREATE TABLE order_products (
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE,
    PRIMARY KEY (order_id, product_id)
);

-- Table: reviews
CREATE TABLE reviews (
    user_id INT NOT NULL,
    rating INT NOT NULL,
    comment VARCHAR(100) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (user_id)
);

-- Table: deliveries
CREATE TABLE deliveries(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    order_id INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

-- Table: points
CREATE TABLE points (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    min_cost MONEY NOT NULL,
    value MONEY NOT NULL,
    PRIMARY KEY (id)
);

-- Table: history_points
CREATE TABLE history_points (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    add_date TIMESTAMP NOT NULL,
    user_id INT NOT NULL,
    size MONEY NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id),
    PRIMARY KEY (id)
);

-- Table for mapping user and points: user_points
CREATE TABLE user_points (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id),
    balance MONEY DEFAULT 0 NOT NULL,
    PRIMARY KEY (id)
);

-- Table: stock
CREATE TABLE stock(
    id INT GENERATED ALWAYS AS IDENTITY,
    size INT NOT NULL,
    PRIMARY KEY (id)
);

-- Table: prices
CREATE TABLE prices(
    product_id INT NOT NULL,
    price MONEY NOT NULL,
    stock_id INT NOT NULL,
    FOREIGN KEY (stock_id) REFERENCES stock (id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products (id) ON DELETE CASCADE,
    PRIMARY KEY (product_id)
);

-- Insert data

INSERT INTO users VALUES (1, 'Максим','Садовский', '+375(29)-575-64-10','24-11-2001','maksim_2411@mail.ru');
INSERT INTO users VALUES (2, 'Павел','Анищенко', '+375(29)-545-64-10','21-11-2001','pavel_2111@mail.ru');

INSERT INTO roles VALUES (1, 'ROLE_USER');
INSERT INTO roles VALUES (2, 'ROLE_ADMIN');

INSERT INTO user_roles VALUES (1,2);

INSERT INTO access VALUES (1, 1, 'admin', 'qwerty', true);
